{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethvanegas/dummy/DUMMY/src/components/containers/searchResults.js\";\nimport React, { Component } from 'react';\nimport ResultCard from '../cards/result.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SearchResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    let key = \"AIzaSyDTOATfJi99hz4laDMwB6OTkDvSzsgi6Mc\";\n    fetch(`https://civicinfo.googleapis.com/civicinfo/v2/elections?key=${key}`).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.elections\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Search Results...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: items.map(item => /*#__PURE__*/_jsxDEV(ResultCard, {\n          item: item\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/elizabethvanegas/dummy/DUMMY/src/components/containers/searchResults.js"],"names":["React","Component","ResultCard","SearchResults","constructor","props","state","error","isLoaded","items","componentDidMount","key","fetch","then","res","json","result","setState","elections","render","message","map","item","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AAEA,eAAe,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACjDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,GAAG,GAAE,yCAAT;AACAC,IAAAA,KAAK,CAAE,+DAA8DD,GAAI,EAApE,CAAL,CACKE,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAGSG,MAAD,IAAY;AACR,WAAKC,QAAL,CAAc;AACVT,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAEO,MAAM,CAACE;AAFJ,OAAd;AAIH,KART,EAUKX,KAAD,IAAW;AACP,WAAKU,QAAL,CAAc;AACVT,QAAAA,QAAQ,EAAE,IADA;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAfL;AAiBH;;AAEDY,EAAAA,MAAM,GAAG;AACL,UAAM;AAACZ,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,QAA2B,KAAKH,KAAtC;;AACA,QAAGC,KAAH,EAAU;AACN,0BACI;AAAA,8BAAaA,KAAK,CAACa,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJD,MAIO,IAAG,CAACZ,QAAJ,EAAc;AACjB,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJM,MAIA;AACH,0BACI;AAAA,kBACKC,KAAK,CAACY,GAAN,CAAUC,IAAI,iBACX,QAAC,UAAD;AAA0B,UAAA,IAAI,EAAEA;AAAhC,WAAiBA,IAAI,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH;AACJ;;AAnDgD","sourcesContent":["import React, {Component} from 'react';\nimport ResultCard from '../cards/result.jsx';\n\nexport default class SearchResults extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: [],\n        }\n    }\n\n    componentDidMount() {\n        let key =\"AIzaSyDTOATfJi99hz4laDMwB6OTkDvSzsgi6Mc\";\n        fetch(`https://civicinfo.googleapis.com/civicinfo/v2/elections?key=${key}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result.elections\n                    });\n                },\n\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n            )\n    }\n\n    render() {\n        const {error, isLoaded, items} = this.state;\n        if(error) {\n            return (\n                <div>Error: {error.message}</div>\n            )\n        } else if(!isLoaded) {\n            return (\n                <div>Loading Search Results...</div>\n            )\n        } else {\n            return (\n                <div>\n                    {items.map(item => (\n                        <ResultCard key={item.id} item={item}/>\n                    ))}\n                </div>\n                \n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}